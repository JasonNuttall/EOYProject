<html lang="en">
  <head>
    <meta charset="UTF-8">

  <script src="/javascripts/jquery-3.2.1.js"></script>
  <script src="/javascripts/handlebars.min.js"></script>
  <script src="/javascripts/peer.min.js"></script>
  <script>
  $(function(){

  var messages = [];
  var peer_id, name, conn;

var peer = new Peer('{{user.username}}',{host: '{{session_host}}', port: 8000, path: '/api'});
  peer.on('open', function(){
    $('#id').text(peer.id);
  });
  
  navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

  function getVideo(callback){
    navigator.getUserMedia({audio: true, video: true}, callback, function(error){
      console.log(error);
      alert('An error occured. Please try again');
    });
  }

  getVideo(function(stream){
    window.localStream = stream;
    onReceiveStream(stream, 'my-camera');
  });

  function onReceiveStream(stream, element_id){
    var video = $('#' + element_id + ' video')[0];
    video.src = window.URL.createObjectURL(stream);
    window.peer_stream = stream;
  }

$(".mute-video").click(function () {
    if (window.localStream.getAudioTracks()[0].enabled) {
        window.localStream.getAudioTracks()[0].enabled = false;
        $(this).addClass('unmute-video');

    } else {
       window.localStream.getAudioTracks()[0].enabled = true;
        $(this).removeClass('unmute-video');
    }

});
$(".disable-camera").click(function() {

    if (window.localStream.getVideoTracks()[0].enabled) {
        window.localStream.getVideoTracks()[0].enabled = false;
        $(this).addClass('enable-camera');

    } else {
       window.localStream.getVideoTracks()[0].enabled = true;
        $(this).removeClass('enable-camera');
    }


})
  $('#login').click(function(){
    name = "counsellor";
    peer_id = $('#peer_id').val();
    if(peer_id){
      conn = peer.connect(peer_id, {metadata: {
        'username': name
      }});
      conn.on('data', handleMessage);
    }

    $('#chat').removeClass('hidden');
    $('#connect').addClass('hidden');
  });

  peer.on('connection', function(connection){
    conn = connection;
    peer_id = connection.peer;
    conn.on('data', handleMessage);

    $('#peer_id').addClass('hidden').val(peer_id);
    $('#connected_peer_container').removeClass('hidden');
    $('#connected_peer').text(connection.metadata.username);
  });

  function handleMessage(data){
    messages.push(data);
    var sender = data.from;
    var text = data.text;
  $('#messages').append($('<li>').text(sender+' : ' +text));
  }

  function sendMessage(){
    var text = $('#message').val();
    var data = {'from': name, 'text': text};

    conn.send(data);
    handleMessage(data);
    $('#message').val('');
  }

  $('#message').keypress(function(e){
    if(e.which == 13){
      sendMessage();
    }
  });

  $('#send-message').click(sendMessage);

  $('#call').click(function(){
    console.log('now calling: ' + peer_id);
    console.log(peer);
    var call = peer.call(peer_id, window.localStream);
    call.on('stream', function(stream){
      window.peer_stream = stream;
      onReceiveStream(stream, 'peer-camera');
    });
  });

  peer.on('call', function(call){
    onReceiveCall(call);
  });

  function onReceiveCall(call){
    call.answer(window.localStream);
    call.on('stream', function(stream){
      window.peer_stream = stream;
      onReceiveStream(stream, 'peer-camera');
    });
  }

});
</script>
<style>
span.icon:before { 
  font-family: 'Glyphicons Halflings'; 
  content: "\f015"; 
}
</style>
  </head>
  <body>
    <div id="container">
<div class = "row">
      <!-- Display the video of the remote peer -->
      <div id="peer-camera" class="camera">
        <h1> Counsellors Camera</h1>
        <video autoplay></video>
      </div>

      <div id="messenger-wrapper">
        <div class="container">
          

          <!--
            Display the login form and messaging form.
            This allows the user to send messages to their peer and make a video call.
          -->
          <div id="connect">
            <h4>please await connected peer message before initiating chat </h4>

            <input type="text" name="peer_id" id="peer_id" placeholder="Peer ID">
            <div id="connected_peer_container" class="hidden">
              Connected Peer:
              <span id="connected_peer"></span>
              Please Begin by initiating chat.
            </div>
            <button id="login">Initiate chat</button>
          </div>

          <div id="chat" class="hidden">
            <div class = "col-sm-4" id = "right" >
            <div id="messages-container">
              <ul id="messages"></ul>
            </div>
            <div id="message-container">
              <input type="text" name="message" id="message" placeholder="Type message..">
              <button id="send-message">Send Message</button>
              <button id="call">Call</button>
            </div>
          </div>
         
          </div>
        </div>
      </div>
</div>
</div>
<duv class = "container-fluid" float left>
      <!-- Display video of the current user -->
      <div id="my-camera" class="camera">
        <h1> Your video</h1>
        <video muted autoplay></video>
          <button class="disable-camera"></button>

        <button class="mute-video"></button>
      </div>
    </div>

</div>
  </body>
</html>